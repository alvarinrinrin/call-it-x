1. Sobre lo que hay que hacer

  3 clasificadores (distancia euclidea, distancia de mahalanobis y k-NN)
  Hacer pruebas jugando un poco con las variables (PCA y tal)
  Probar los clasificadores para ver la precisión, y preparar una presentación con los resultados.
  
2. Una propuesta de trabajo
  
  A construcción clasificador distancia euclidea
  B construcción clasificador distancia de mahalanobis
  C construcción clasificador k-NN
  D recogida de datos (hacer pruebas y estadisticas y crear algún grafico)
  E presentación, hacerla y exponerla

3. Asignación

  A : { Álvaro (construye)  , XXXXXX (prueba) }
  B : { Mariano (construye) , YYYYYY (prueba) }
  C : { Roberto (construye) , Irene (prueba) }
  D : Agustín
                     donde: XXXXXX,YYYYYY E { Carlos|Charles }

4. Primera reunión formal:
  Jueves 18 de diciembre, 18:30 hrs.
  Aula 3203 (la de clases, en las mesas aledañas)
  Asistieron: Álvaro, Irene, Roberto, Agustín.
  
  Resumen:
  Álvaro, Mariano y Roberto construirán los tres clasificadores, uno cada uno. Al tiempo Irene, Carlos y Charlles harán la recopilación de datos y pruebas; también, cada uno para un clasificador. La idea con esto es que haya parejas de trabajo y se retroalimenten entre ellos. Finalmente, yo sigo con lo que tenía asignado, es decir, la elaboración de la presentación y apoyo inmoral en lo que se necesite.

  Acuerdos globales alcanzados:
  - Lenguaje de programación a utilizar: Python 2 (releases 2.6/2.7)
  - Plataforma de control de versiones: GitHub (https://github.com/the-ex-team/call-it-x)

  Acuerdos específicos a alcanzar (llegar a consenso entre los tres programadores): 
  Propuesta de Mariano:
      librerias y/o metodos a utilizar:
          (distancias) from scipy.spatial.distance import euclidean (o mahalanobis)
          (en caso de mahalanobis para la covarianza) from numpy import cov
          (libreria grafica) from PIL import Image
          (abrir la foto) i = Image.open('path foto')
          (convertir en escala de gris) i.convert('L')
          (dimensión de la foto) i.size
          (transformarla en una matriz de numeros) matrix=i.load()   (matriz de dimensión i.size[0], i.size[1])
          (recuperar el valor de un pixel) matrix[x,y]   (x,y entre 0 y i.size[0]-1, i.size[1]-1)

      input y output:
          input : path de una foto
          output : una letra con el grupo (a,b,c,d,e)
                              
          
  Dudas a despejar:
- euclidea y mahalanobis
   calculas la distancia media (euclidea o de mahalanobis) entre las fotos de cada grupo y eliges el grupo que esté mediamente mas cerca
- k-nn
   eliges una metrica (ej euclidea), coges las K fotos mas cerca ENTRE TODOS LOS GRUPOS, y de estas K fotos, miras cual es el grupo más frecuente
